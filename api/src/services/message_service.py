import asyncio
from datetime import datetime, timedelta
from typing import List, Optional
from ..models import Conversation, LastMessage, Message, ParticipantInfo
from ..websocket import manager
from ..schemas import SimpleMessagePublic, LastMessagePublic, ConversationWithParticipants
from ..schemas.user_schema import UserPublic
from .user_service import UserService
from ..utils import upload_to_cloudinary
from fastapi import UploadFile
from ..utils import map_message_to_public_dict, map_conversation_to_public_dict

class MessageService:

    async def get_or_create_conversation(
        participant_ids: List[str],
        is_group: bool = False,
        name: Optional[str] = None,
    ):
        """
        T√¨m m·ªôt cu·ªôc tr√≤ chuy·ªán hi·ªán c√≥ ho·∫∑c t·∫°o m·ªõi.
        - N·∫øu l√† chat 1‚Äì1 => t√¨m ch√≠nh x√°c 2 ng∆∞·ªùi.
        - N·∫øu l√† group => lu√¥n t·∫°o m·ªõi (v√¨ c√≥ th·ªÉ c√≥ nhi·ªÅu nh√≥m tr√πng th√†nh vi√™n).
        """
        canonical_participants = sorted(list(set(participant_ids)))

        if len(canonical_participants) < 2:
            raise ValueError("M·ªôt cu·ªôc tr√≤ chuy·ªán y√™u c·∫ßu √≠t nh·∫•t hai ng∆∞·ªùi tham gia.")

        if not is_group:
            # üîç T√¨m chat 1‚Äì1 c√≥ ƒë√∫ng 2 user
            conversation = await Conversation.find_one({
                "participants": {"$size": len(canonical_participants)},
                "participants.userId": {"$all": canonical_participants},
                "isGroup": False
            })
        else:
            # üîç Group chat lu√¥n t·∫°o m·ªõi
            conversation = None

        if not conversation:
            participants = [ParticipantInfo(userId=uid) for uid in canonical_participants]
            conversation = Conversation(
                participants=participants,
                isGroup=is_group,
                name=name,
            )
            await conversation.insert()

        return conversation

    @staticmethod
    async def send_message(
        sender_id: str, 
        conversation_id: str, 
        content: dict, 
        files: Optional[List[UploadFile]] = None
    ):
        """
        G·ª≠i tin nh·∫Øn, upload file n·∫øu c√≥, l∆∞u DB v√† ph√°t t·ªõi ng∆∞·ªùi tham gia.
        """
        conversation = await Conversation.get(conversation_id)
        if not conversation:
            raise ValueError("Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán.")

        if sender_id not in [p.userId for p in conversation.participants]:
            raise PermissionError("Ng∆∞·ªùi g·ª≠i kh√¥ng thu·ªôc cu·ªôc tr√≤ chuy·ªán n√†y.");

        if files:
            if content['type'] == 'audio' or content['type'] == 'file':
                upload_tasks = [upload_to_cloudinary(f) for f in files]    
                results = await asyncio.gather(*upload_tasks)
                content["url"] = results[0]["url"]
            else:
                if content['type'] == 'media':
                    upload_tasks = [upload_to_cloudinary(f) for f in files]    
                    results = await asyncio.gather(*upload_tasks)
                    content["urls"] = [result["url"] for result in results]

        # T·∫°o v√† l∆∞u tin nh·∫Øn
        message = Message(
            conversationId=conversation_id,
            senderId=sender_id,
            content=content,
            createdAt=datetime.utcnow() + timedelta(hours=7)
        )
        await message.save()

        # C·∫≠p nh·∫≠t lastMessage cho conversation
        conversation.lastMessage = LastMessage(
            content=message.content,
            senderId=message.senderId,
            createdAt=message.createdAt
        )
        conversation.updatedAt = datetime.utcnow() + timedelta(hours=7)
        conversation.seenIds = [sender_id]
        await conversation.save()

        # Ph√°t broadcast tin nh·∫Øn m·ªõi
        message_data = map_message_to_public_dict(message)
        conversation_data = map_conversation_to_public_dict(conversation)

        tasks = [
            manager.broadcast_to_user(
                uid,
                {
                    "type": "new_message",
                    "payload": {"message": message_data, "conversation": conversation_data}
                }
            )
            for uid in [p.userId for p in conversation.participants]
        ]
        await asyncio.gather(*tasks)

        return message
    
    @staticmethod
    async def get_messages_for_conversation(
        conversation_id: str,
        user_id: str,
        limit: int = 50,
        skip: int = 0
    ):
        """
        L·∫•y tin nh·∫Øn cho m·ªôt cu·ªôc tr√≤ chuy·ªán, ch·ªâ g·ªìm nh·ªØng tin nh·∫Øn sau khi user x√≥a (n·∫øu c√≥).
        """
        conversation = await Conversation.get(conversation_id)
        if not conversation:
            raise PermissionError("Cu·ªôc tr√≤ chuy·ªán kh√¥ng t·ªìn t·∫°i.")

        # üîç Ki·ªÉm tra user c√≥ trong participant kh√¥ng
        participant = next((p for p in conversation.participants if p.userId == user_id), None)
        if not participant:
            raise PermissionError("B·∫°n kh√¥ng ƒë∆∞·ª£c ph√©p xem cu·ªôc tr√≤ chuy·ªán n√†y.")

        # üî∏ Th·ªùi ƒëi·ªÉm user n√†y ƒë√£ x√≥a tin nh·∫Øn (n·∫øu c√≥)
        delete_time = participant.lastMessageDelete

        # üîé T·∫°o ƒëi·ªÅu ki·ªán truy v·∫•n tin nh·∫Øn
        query = {"conversationId": conversation_id}
        if delete_time:
            query["createdAt"] = {"$gt": delete_time}

        messages = (
            await Message.find(
                query,
                sort="-createdAt",
                skip=skip,
                limit=limit
            ).to_list()
        )

        # L·∫•y ng∆∞·ªùi g·ª≠i ƒë·ªÉ g·∫Øn th√™m th√¥ng tin hi·ªÉn th·ªã
        sender_ids = list(set(msg.senderId for msg in messages))
        senders = await UserService.get_users_by_ids(sender_ids)
        senders_map = {str(s.id): s for s in senders}

        simple_messages = []
        for msg in messages:
            sender = senders_map.get(msg.senderId)
            if sender:
                simple_messages.append(
                    SimpleMessagePublic(
                        id=str(msg.id),
                        senderId=msg.senderId,
                        avatarUrl=sender.avatarUrl,
                        content=msg.content,
                        createdAt=msg.createdAt
                    )
                )

        return simple_messages


    @staticmethod
    async def get_conversations_for_user(user_id: str):
        """
        L·∫•y t·∫•t c·∫£ c√°c cu·ªôc tr√≤ chuy·ªán cho m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ.
        """
        convos = await Conversation.find(
            {"participants.userId": user_id}
        ).sort("-updatedAt").to_list()

        result = []

        for convo in convos:
            # L·∫•y participant info c·ªßa current_user trong conversation n√†y
            participant_info = next(
                (p for p in convo.participants if p.userId == str(user_id)),
                None
            )
            delete_time = participant_info.lastMessageDelete if participant_info else None

            # L·∫•y th√¥ng tin chi ti·∫øt c·ªßa ng∆∞·ªùi tham gia
            participants = await UserService.get_users_by_ids([p.userId for p in convo.participants])

            participant_publics = [
                UserPublic(
                    id=str(p.id),
                    username=p.username,
                    email=p.email,
                    displayName=p.displayName,
                    avatarUrl=p.avatarUrl,
                    backgroundUrl=p.backgroundUrl,
                    bio=p.bio
                )
                for p in participants
            ]

            last_message_preview = None

            if convo.lastMessage:
                if delete_time and convo.lastMessage.createdAt <= delete_time:
                    last_message_preview = None
                else:
                    last_message_preview = convo.lastMessage

            convo_with_participants = ConversationWithParticipants(
                id=str(convo.id),
                participantsInfo=convo.participants,
                participants=participant_publics,
                lastMessage=(
                    LastMessagePublic(**last_message_preview.model_dump())
                    if last_message_preview
                    else None
                ),
                updatedAt=convo.updatedAt,
                seenIds=convo.seenIds,
                isGroup=convo.isGroup,
                name=convo.name,
                avatarUrl=convo.avatarUrl,
            )
            result.append(convo_with_participants)

        return result
    
    @staticmethod
    async def mark_conversation_as_seen(conversation_id: str, user_id: str):
        """
        ƒê√°nh d·∫•u m·ªôt cu·ªôc tr√≤ chuy·ªán l√† ƒë√£ xem b·ªüi ng∆∞·ªùi d√πng c·ª• th·ªÉ.
        """
        conversation = await Conversation.get(conversation_id)
        if not conversation or user_id not in [p.userId for p in conversation.participants]:
            raise PermissionError("B·∫°n kh√¥ng ƒë∆∞·ª£c ph√©p xem cu·ªôc tr√≤ chuy·ªán n√†y.")

        if user_id not in conversation.seenIds:
            conversation.seenIds.append(user_id)
            await conversation.save()

        task = [
            # Ph√°t t√≠nh hi·ªáu refresh
            manager.broadcast_to_user(
                user_id,
                {
                    "type": "conversation_seen",
                    "payload": {"conversationId": conversation_id}
                }
            )
        ]
        await asyncio.gather(*task)

        return conversation
    
    @staticmethod
    async def recall_message(message_id: str, user_id: str):
        """
        Thu h·ªìi m·ªôt tin nh·∫Øn ƒë√£ g·ª≠i.
        """
        message = await Message.get(message_id)
        if not message:
            raise ValueError("Kh√¥ng t√¨m th·∫•y tin nh·∫Øn.")

        if message.senderId != user_id:
            raise PermissionError("B·∫°n kh√¥ng c√≥ quy·ªÅn thu h·ªìi tin nh·∫Øn n√†y.")

        # Thay ƒë·ªïi n·ªôi dung tin nh·∫Øn
        message.content['type'] = 'delete'
        await message.save()

        # Ki·ªÉm tra v√† c·∫≠p nh·∫≠t lastMessage trong conversation
        conversation = await Conversation.get(message.conversationId)
        if conversation and conversation.lastMessage and conversation.lastMessage.createdAt == message.createdAt:
            conversation.lastMessage.content = message.content
            await conversation.save()

        # Ph√°t broadcast tin nh·∫Øn ƒë√£ thu h·ªìi
        message_data = map_message_to_public_dict(message)
        conversation_data = map_conversation_to_public_dict(conversation)

        tasks = [
            manager.broadcast_to_user(
                uid,
                {
                    "type": "recalled_message",
                    "payload": {
                        "conversation": conversation_data,
                        "message": message_data
                    }
                }
            )
            for uid in [p.userId for p in conversation.participants]
        ]
        await asyncio.gather(*tasks)

        return message