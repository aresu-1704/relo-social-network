import 'package:dio/dio.dart';
import 'package:relo/services/secure_storage_service.dart';
import 'package:relo/constants.dart';
// import removed; use ServiceLocator.websocketService instead
import 'package:relo/services/service_locator.dart';

/// Custom exception cho t√†i kho·∫£n ƒë√£ b·ªã x√≥a
class AccountDeletedException implements Exception {
  final String message;
  AccountDeletedException(this.message);

  @override
  String toString() => message;
}

class AuthService {
  final Dio _dio = Dio(BaseOptions(baseUrl: baseUrl));
  final SecureStorageService _storageService = const SecureStorageService();

  // Add a flag to prevent multiple refresh calls
  static bool _isRefreshing = false;

  Future<String?> get accessToken => _storageService.getAccessToken();

  /// G·ª≠i m√£ OTP qua email
  Future<String> sendOTP(String identifier) async {
    try {
      final response = await _dio.post(
        'auth/send-otp',
        data: {'identifier': identifier},
      );

      if (response.statusCode == 200) {
        return response.data['email'];
      }
      throw Exception('Kh√¥ng th·ªÉ g·ª≠i OTP');
    } on DioException catch (e) {
      if (e.response?.statusCode == 400) {
        throw Exception('Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n');
      }
      throw Exception('ƒê√£ x·∫£y ra l·ªói m·∫°ng.');
    } catch (e) {
      throw Exception('ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.');
    }
  }

  /// X√°c minh m√£ OTP
  Future<void> verifyOTP(String email, String otpCode) async {
    try {
      await _dio.post(
        'auth/verify-otp',
        data: {'email': email, 'otp_code': otpCode},
      );
    } on DioException catch (e) {
      if (e.response?.statusCode == 400) {
        throw Exception(e.response?.data['detail'] ?? 'M√£ OTP kh√¥ng h·ª£p l·ªá.');
      }
      throw Exception('ƒê√£ x·∫£y ra l·ªói m·∫°ng.');
    } catch (e) {
      throw Exception('ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.');
    }
  }

  /// ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi
  Future<void> resetPassword(String email, String newPassword) async {
    try {
      await _dio.post(
        'auth/reset-password',
        data: {'email': email, 'new_password': newPassword},
      );
    } on DioException catch (e) {
      if (e.response?.statusCode == 400) {
        throw Exception(
          e.response?.data['detail'] ?? 'Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.',
        );
      }
      throw Exception('ƒê√£ x·∫£y ra l·ªói m·∫°ng.');
    } catch (e) {
      throw Exception('ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.');
    }
  }

  /// ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng v√† l∆∞u tokens n·∫øu th√†nh c√¥ng.
  Future<void> login(
    String username,
    String password, {
    String? deviceToken,
  }) async {
    final body = {'username': username, 'password': password};

    if (deviceToken != null) {
      body['device_token'] = deviceToken;
    }

    try {
      final response = await _dio.post('auth/login', data: body);

      if (response.statusCode == 200 && response.data != null) {
        final accessToken = response.data['access_token'];
        final refreshToken = response.data['refresh_token'];

        if (accessToken != null && refreshToken != null) {
          await _storageService.saveTokens(
            accessToken: accessToken,
            refreshToken: refreshToken,
          );
        } else {
          throw Exception('Login failed: Tokens not received.');
        }
      } else {
        throw Exception('Login failed: Invalid response from server.');
      }
    } on DioException catch (e) {
      // Handle Dio-specific errors
      if (e.response?.statusCode == 401) {
        throw Exception('T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c.');
      } else if (e.response?.statusCode == 403) {
        // T√†i kho·∫£n ƒë√£ b·ªã x√≥a
        final errorMessage =
            e.response?.data['detail'] ?? 'T√†i kho·∫£n ƒë√£ b·ªã x√≥a.';
        throw AccountDeletedException(errorMessage);
      }
      throw Exception('ƒê√£ x·∫£y ra l·ªói m·∫°ng.');
    } catch (e) {
      if (e is AccountDeletedException) {
        rethrow;
      }
      throw Exception('ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.');
    }
  }

  /// ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi.
  Future<void> register({
    required String username,
    required String email,
    required String password,
    required String displayName,
  }) async {
    try {
      await _dio.post(
        'auth/register',
        data: {
          'username': username,
          'email': email,
          'password': password,
          'displayName': displayName,
        },
      );
    } on DioException catch (e) {
      if (e.response?.statusCode == 400) {
        throw Exception(e.response?.data['detail'] ?? 'L·ªói ƒëƒÉng k√Ω.');
      }
      throw Exception('ƒê√£ x·∫£y ra l·ªói m·∫°ng.');
    } catch (e) {
      throw Exception('ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.');
    }
  }

  /// ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng (g·ªçi API logout v√† x√≥a tokens ·ªü ph√≠a client).
  /// skipApiCall: N·∫øu true, ch·ªâ x√≥a tokens ·ªü client, kh√¥ng g·ªçi API (d√πng ƒë·ªÉ tr√°nh recursive)
  Future<void> logout({String? deviceToken, bool skipApiCall = false}) async {
    try {
      // N·∫øu skip API call, ch·ªâ x√≥a tokens ·ªü client
      if (skipApiCall) {
        print('üì± Logout: Skipping API call, clearing local tokens only');
        await _storageService.deleteTokens();
        ServiceLocator.websocketService.disconnect();
        return;
      }

      // G·ªçi API logout ƒë·ªÉ x√≥a device token tr√™n server
      // S·ª≠ d·ª•ng Dio t·ª´ ServiceLocator ƒë·ªÉ c√≥ interceptor t·ª± ƒë·ªông refresh token
      final requestData = deviceToken != null && deviceToken.isNotEmpty
          ? {'device_token': deviceToken}
          : {};

      print(
        'üì± Logout request - Device token: ${deviceToken != null ? "${deviceToken.substring(0, deviceToken.length > 20 ? 20 : deviceToken.length)}..." : "null"}',
      );

      // L·∫•y Dio t·ª´ ServiceLocator ƒë·ªÉ c√≥ interceptor t·ª± ƒë·ªông refresh token
      // N·∫øu ServiceLocator ch∆∞a init, fallback v·ªÅ _dio ri√™ng
      Dio dioInstance;
      try {
        dioInstance = ServiceLocator.dio;
        print('üì± Using DioApiService Dio (with interceptor)');
      } catch (e) {
        // N·∫øu ServiceLocator ch∆∞a init, d√πng Dio ri√™ng v√† th·ª≠ refresh manually
        print(
          '‚ö†Ô∏è ServiceLocator not available, using local Dio and manual refresh',
        );

        // Th·ª≠ refresh token tr∆∞·ªõc
        final refreshed = await refreshToken();
        final token = refreshed ?? await accessToken;
        if (token == null) {
          print('‚ö†Ô∏è Cannot get valid token, clearing local tokens');
          await _storageService.deleteTokens();
          ServiceLocator.websocketService.disconnect();
          return;
        }

        dioInstance = _dio;
      }

      // G·ªçi API logout - interceptor s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω token refresh n·∫øu c·∫ßn
      final response = await dioInstance.post('auth/logout', data: requestData);

      // Ch·ªâ logout khi server tr·∫£ v·ªÅ 200 (ƒë√£ x√≥a device token th√†nh c√¥ng)
      if (response.statusCode == 200) {
        await _storageService.deleteTokens();
        ServiceLocator.websocketService.disconnect();
      } else {
        throw Exception('ƒê√£ x·∫£y ra l·ªói, kh√¥ng th·ªÉ ƒëƒÉng xu·∫•t');
      }
    } on DioException catch (e) {
      // N·∫øu API logout th·∫•t b·∫°i (401, 403, etc.),
      // v·∫´n x√≥a tokens ·ªü client ƒë·ªÉ ƒë·∫£m b·∫£o logout local
      print(
        '‚ö†Ô∏è Logout API failed: ${e.response?.statusCode}, clearing local tokens anyway',
      );

      // X√≥a tokens ·ªü client ngay c·∫£ khi API th·∫•t b·∫°i
      // (Ng∆∞·ªùi d√πng v·∫´n mu·ªën logout, d√π server kh√¥ng th·ªÉ x√≥a device token)
      try {
        await _storageService.deleteTokens();
        ServiceLocator.websocketService.disconnect();

        // N·∫øu l√† 401/403, c√≥ th·ªÉ token ƒë√£ h·∫øt h·∫°n, v·∫´n cho ph√©p logout
        if (e.response?.statusCode == 401 || e.response?.statusCode == 403) {
          // Token h·∫øt h·∫°n nh∆∞ng v·∫´n logout ƒë∆∞·ª£c ·ªü client
          return;
        }

        // C√°c l·ªói kh√°c, v·∫´n throw exception ƒë·ªÉ th√¥ng b√°o
        throw Exception(
          'ƒê√£ x·∫£y ra l·ªói, kh√¥ng th·ªÉ ƒëƒÉng xu·∫•t: ${e.response?.data['detail'] ?? 'L·ªói k·∫øt n·ªëi'}',
        );
      } catch (storageError) {
        // N·∫øu x√≥a tokens c≈©ng fail, v·∫´n throw exception g·ªëc
        throw Exception(
          'ƒê√£ x·∫£y ra l·ªói, kh√¥ng th·ªÉ ƒëƒÉng xu·∫•t: ${e.response?.data['detail'] ?? 'L·ªói k·∫øt n·ªëi'}',
        );
      }
    } catch (e) {
      // C√°c l·ªói kh√°c - c·ªë g·∫Øng x√≥a tokens ·ªü client
      print('‚ö†Ô∏è Unexpected error during logout: $e, clearing local tokens');
      try {
        await _storageService.deleteTokens();
        ServiceLocator.websocketService.disconnect();
      } catch (_) {
        // Ignore errors khi x√≥a tokens
      }
      throw Exception('ƒê√£ x·∫£y ra l·ªói, kh√¥ng th·ªÉ ƒëƒÉng xu·∫•t');
    }
  }

  // L·∫•y access token m·ªõi b·∫±ng refresh token.
  Future<String?> refreshToken() async {
    // Prevent multiple refresh calls at the same time
    if (_isRefreshing) {
      return null;
    }
    _isRefreshing = true;

    try {
      final refreshToken = await _storageService.getRefreshToken();
      if (refreshToken == null) {
        // This isn't a network error, but a state error. No token, so can't refresh.
        // Kh√¥ng g·ªçi logout() ƒë·ªÉ tr√°nh recursive, ch·ªâ return null
        print('‚ö†Ô∏è No refresh token available');
        return null;
      }

      final response = await _dio.post(
        'auth/refresh',
        data: {'refresh_token': refreshToken},
      );

      if (response.statusCode == 200) {
        final newAccessToken = response.data['access_token'];
        await _storageService.saveTokens(
          accessToken: newAccessToken,
          refreshToken:
              refreshToken, // The refresh token might be rotated, but the example doesn't show it
        );
        return newAccessToken;
      } else {
        // A non-200 response that isn't a DioException (unlikely but possible)
        // Ch·ªâ logout khi l√† 401 ho·∫∑c 403, kh√¥ng logout khi l√† l·ªói kh√°c (400, 500, etc.)
        if (response.statusCode == 401 || response.statusCode == 403) {
          // G·ªçi logout v·ªõi skipApiCall=true ƒë·ªÉ tr√°nh recursive
          await logout(skipApiCall: true);
        }
        return null;
      }
    } on DioException catch (e) {
      // Ch·ªâ logout khi 401 (Unauthorized) ho·∫∑c 403 (Forbidden)
      if (e.response?.statusCode == 401 || e.response?.statusCode == 403) {
        if (e.response?.statusCode == 403) {
          final errorMessage =
              e.response?.data['detail'] ?? 'T√†i kho·∫£n ƒë√£ b·ªã x√≥a.';
          throw AccountDeletedException(errorMessage);
        }
        // G·ªçi logout v·ªõi skipApiCall=true ƒë·ªÉ tr√°nh recursive
        await logout(skipApiCall: true);
        return null;
      }
      // C√°c l·ªói kh√°c (400, 500, network error, etc.) - KH√îNG logout
      // Ch·ªâ return null ƒë·ªÉ reconnect sau
      return null;
    } catch (e) {
      if (e is AccountDeletedException) {
        rethrow;
      }
      // C√°c l·ªói kh√°c (exception kh√¥ng ph·∫£i DioException) - KH√îNG logout
      return null;
    } finally {
      _isRefreshing = false;
    }
  }

  Future<Map<String, dynamic>> changeEmailVerifyPassword(
    String userId,
    String newEmail,
    String password,
  ) async {
    try {
      final response = await _dio.post(
        '/auth/change-email/verify-password',
        data: {'user_id': userId, 'new_email': newEmail, 'password': password},
      );

      return response.data;
    } on DioException catch (e) {
      if (e.response?.statusCode == 400) {
        throw Exception(e.response?.data['detail'] ?? 'Th·∫•t b·∫°i');
      }
      throw Exception('L·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  }

  Future<String> updateEmail(String userId, String newEmail) async {
    try {
      final response = await _dio.post(
        '/auth/change-email/update',
        data: {'user_id': userId, 'new_email': newEmail},
      );

      return response.data['message'];
    } on DioException catch (e) {
      if (e.response?.statusCode == 400) {
        throw Exception(e.response?.data['detail'] ?? 'Th·∫•t b·∫°i');
      }
      throw Exception('L·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  }
}
